from flask import Flask, render_template, request, jsonify, send_from_directory
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import socket
import time
from datetime import datetime

app = Flask(__name__)

# Email Configuration - UPDATE THESE WITH YOUR EMAIL
EMAIL_CONFIG = {
    'smtp_server': 'smtp.gmail.com',  # For Gmail
    'smtp_port': 587,
    'sender_email': 'sbg.docs1188@gmail.com',  # CHANGE THIS TO YOUR EMAIL
    'sender_password': 'didk qsff ewub ctya'   # CHANGE THIS TO YOUR APP PASSWORD
}

def find_available_port(start_port=5000, max_port=5010):
    """Find an available port starting from start_port"""
    for port in range(start_port, max_port + 1):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('localhost', port))
                return port
        except OSError:
            continue
    return None

def get_local_ip():
    """Get local IP address for network access"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]
    except:
        return "127.0.0.1"

def send_order_email(order_data, recipient_email='sbg.docs1188@gmail.com'):
    """Send order confirmation email"""
    try:
        # Create email message
        msg = MIMEMultipart()
        msg['From'] = EMAIL_CONFIG['sender_email']
        msg['To'] = recipient_email
        msg['Subject'] = f"SBG Order - {order_data.get('outlet')} - {order_data.get('date')}"
        
        # Create email body
        body = f"""
NEW ORDER RECEIVED - SBG GROUPS
================================

ORDER DETAILS:
--------------
Date: {order_data.get('date')}
Outlet: {order_data.get('outlet')}
Division: {order_data.get('division')}
Order ID: SBG{int(time.time())}
Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

BEVERAGES ORDER:
----------------
"""
        
        # Add beverages to email
        beverage_total = 0
        for category, items in order_data.get('beverages', {}).items():
            category_items = []
            for size, quantities in items.items():
                if isinstance(quantities, dict):
                    box_qty = quantities.get('box', 0)
                    piece_qty = quantities.get('piece', 0)
                    if box_qty > 0:
                        category_items.append(f"{size}ml - {box_qty} boxes")
                        beverage_total += box_qty
                    if piece_qty > 0:
                        category_items.append(f"{size}ml - {piece_qty} pieces")
                        beverage_total += piece_qty
            
            if category_items:
                body += f"\n{category}:\n"
                for item in category_items:
                    body += f"  • {item}\n"
        
        body += f"\nTotal Beverage Items: {beverage_total}"
        
        body += "\n\nSOFT DRINKS ORDER:\n------------------\n"
        
        # Add soft drinks to email
        soft_drink_total = 0
        for drink, items in order_data.get('softDrinks', {}).items():
            drink_items = []
            for size, quantities in items.items():
                if isinstance(quantities, dict):
                    box_qty = quantities.get('box', 0)
                    piece_qty = quantities.get('piece', 0)
                    if box_qty > 0:
                        drink_items.append(f"{size} - {box_qty} boxes")
                        soft_drink_total += box_qty
                    if piece_qty > 0:
                        drink_items.append(f"{size} - {piece_qty} pieces")
                        soft_drink_total += piece_qty
            
            if drink_items:
                body += f"\n{drink}:\n"
                for item in drink_items:
                    body += f"  • {item}\n"
        
        body += f"\nTotal Soft Drink Items: {soft_drink_total}"
        body += f"\n\nGRAND TOTAL: {beverage_total + soft_drink_total} items"
        
        body += f"""

---
This order was automatically generated by SBG Groups Order App.
Please process this order and arrange for delivery.
"""

        msg.attach(MIMEText(body, 'plain'))
        
        # Send email
        server = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'])
        server.starttls()
        server.login(EMAIL_CONFIG['sender_email'], EMAIL_CONFIG['sender_password'])
        text = msg.as_string()
        server.sendmail(EMAIL_CONFIG['sender_email'], recipient_email, text)
        server.quit()
        
        print(f"📧 Email sent successfully to {recipient_email}")
        return True
        
    except Exception as e:
        print(f"❌ Email sending failed: {e}")
        return False

def print_order_console(order_data):
    """Print order details to console"""
    print("\n" + "="*60)
    print("📋 ORDER SUMMARY - MANUAL PROCESSING REQUIRED")
    print("="*60)
    print(f"📍 Outlet: {order_data.get('outlet')}")
    print(f"📅 Date: {order_data.get('date')}")
    print(f"🏢 Division: {order_data.get('division')}")
    print(f"🆔 Order ID: SBG{int(time.time())}")
    print(f"⏰ Time: {datetime.now().strftime('%H:%M:%S')}")
    print("="*60)
    
    print("\n🍷 BEVERAGES ORDER:")
    print("-" * 30)
    beverage_count = 0
    for category, items in order_data.get('beverages', {}).items():
        has_items = False
        for size, quantities in items.items():
            if isinstance(quantities, dict):
                box_qty = quantities.get('box', 0)
                piece_qty = quantities.get('piece', 0)
                if box_qty > 0 or piece_qty > 0:
                    if not has_items:
                        print(f"\n{category}:")
                        has_items = True
                    if box_qty > 0:
                        print(f"  └─ {size}ml: {box_qty} boxes")
                        beverage_count += box_qty
                    if piece_qty > 0:
                        print(f"  └─ {size}ml: {piece_qty} pieces")
                        beverage_count += piece_qty
    
    print(f"\n📦 Total Beverages: {beverage_count} items")
    
    print("\n🥤 SOFT DRINKS ORDER:")
    print("-" * 30)
    soft_drink_count = 0
    for drink, items in order_data.get('softDrinks', {}).items():
        has_items = False
        for size, quantities in items.items():
            if isinstance(quantities, dict):
                box_qty = quantities.get('box', 0)
                piece_qty = quantities.get('piece', 0)
                if box_qty > 0 or piece_qty > 0:
                    if not has_items:
                        print(f"\n{drink}:")
                        has_items = True
                    if box_qty > 0:
                        print(f"  └─ {size}: {box_qty} boxes")
                        soft_drink_count += box_qty
                    if piece_qty > 0:
                        print(f"  └─ {size}: {piece_qty} pieces")
                        soft_drink_count += piece_qty
    
    print(f"\n📦 Total Soft Drinks: {soft_drink_count} items")
    print(f"\n🎯 GRAND TOTAL: {beverage_count + soft_drink_count} items")
    print("="*60)
    return True

def print_network_info(port):
    """Print network access information"""
    local_ip = get_local_ip()
    
    print("\n" + "="*70)
    print("🚀 SBG GROUPS ORDER APP STARTED SUCCESSFULLY!")
    print("="*70)
    print("📱 ACCESS YOUR APP USING:")
    print("="*70)
    print(f"💻 Local:      http://localhost:{port}")
    print(f"📱 On Phone:   http://{local_ip}:{port}")
    print("="*70)
    print("📋 INSTRUCTIONS:")
    print("   1. Connect phone to same WiFi as this computer")
    print(f"   2. Open http://{local_ip}:{port} on your phone browser")
    print("   3. Test the app thoroughly")
    print("   4. Use 'Add to Home Screen' for app-like experience")
    print("="*70)
    
    # Try to generate QR code
    try:
        import qrcode
        qr = qrcode.QRCode(version=1, box_size=2, border=1)
        qr.add_data(f"http://{local_ip}:{port}")
        qr.make(fit=True)
        
        print("\n📱 SCAN THIS QR CODE WITH YOUR PHONE:")
        print("   (Make sure phone is on same WiFi network)")
        qr.print_ascii(invert=True)
        
    except ImportError:
        print("\n💡 Tip: Install 'qrcode' and 'pillow' for QR code feature:")
        print("      pip install qrcode pillow")
    
    print(f"\n🔗 Manual URL: http://{local_ip}:{port}")
    print("\n")

@app.route('/')
def index():
    """Main application route"""
    return render_template('index.html')

@app.route('/manifest.json')
def manifest():
    """PWA manifest file"""
    return send_from_directory('static', 'manifest.json')

@app.route('/sw.js')
def sw():
    """Service Worker"""
    return send_from_directory('static', 'sw.js', mimetype='application/javascript')

@app.route('/privacy')
def privacy_policy():
    """Privacy Policy page"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Privacy Policy - SBG Groups</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; }
            h1 { color: #3498db; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
            h2 { color: #2c3e50; margin-top: 30px; }
            ul { padding-left: 20px; }
        </style>
    </head>
    <body>
        <h1>Privacy Policy - SBG Groups Order App</h1>
        <p><strong>Last updated:</strong> October 23, 2025</p>
        
        <h2>Information We Collect</h2>
        <p>SBG Groups Order App collects only the information necessary to process your beverage orders:</p>
        <ul>
            <li>Outlet name and division</li>
            <li>Order details (beverages, soft drinks, quantities)</li>
            <li>Order date and time</li>
        </ul>
        
        <h2>How We Use Your Information</h2>
        <p>We use the collected information solely for:</p>
        <ul>
            <li>Processing and fulfilling your orders</li>
            <li>Inventory management and business operations</li>
            <li>Improving our services</li>
            <li>Internal reporting and analytics</li>
        </ul>
        
        <h2>Data Storage and Security</h2>
        <p>All order data is stored securely and is only accessible to authorized SBG Groups personnel. We implement appropriate security measures to protect your information.</p>
        
        <h2>Contact Us</h2>
        <p>If you have any questions about this Privacy Policy or your order data, please contact SBG Groups management.</p>
    </body>
    </html>
    """

@app.route('/submit_order', methods=['POST'])
def submit_order():
    """Handle order submissions with email"""
    try:
        order_data = request.get_json()
        order_id = f"SBG{int(time.time())}"
        
        print(f"📦 [{datetime.now().strftime('%H:%M:%S')}] New order received:")
        print(f"   📅 Date: {order_data.get('date')}")
        print(f"   🏪 Outlet: {order_data.get('outlet')}")
        print(f"   🗺️  Division: {order_data.get('division')}")
        
        # Count items for logging
        beverage_count = 0
        for category, items in order_data.get('beverages', {}).items():
            for size, quantities in items.items():
                if isinstance(quantities, dict):
                    beverage_count += quantities.get('box', 0) + quantities.get('piece', 0)
        
        soft_drink_count = 0
        for drink, items in order_data.get('softDrinks', {}).items():
            for size, quantities in items.items():
                if isinstance(quantities, dict):
                    soft_drink_count += quantities.get('box', 0) + quantities.get('piece', 0)
        
        print(f"   🍷 Beverages: {beverage_count} items")
        print(f"   🥤 Soft Drinks: {soft_drink_count} items")
        
        # Try to send email, fallback to console printing
        email_sent = False
        if EMAIL_CONFIG['sender_email'] != 'your-email@gmail.com':
            email_sent = send_order_email(order_data)
        else:
            print("   ⚠️  Email not configured - using console output")
        
        # Always print to console for backup
        print_order_console(order_data)
        
        if email_sent:
            print(f"   📧 Email confirmation sent")
            message = "Order submitted successfully! Email confirmation sent to SBG Groups."
        else:
            print(f"   📋 Order saved to console for manual processing")
            message = "Order submitted successfully! The order has been recorded and will be processed."
        
        print(f"   ✅ Order {order_id} processed successfully")
        
        return jsonify({
            "success": True, 
            "message": message,
            "order_id": order_id,
            "email_sent": email_sent,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"❌ [{datetime.now().strftime('%H:%M:%S')}] Error processing order: {e}")
        return jsonify({
            "success": False, 
            "message": f"Error submitting order: {str(e)}"
        })

@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "healthy",
        "service": "SBG Groups Order App",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0",
        "email_configured": EMAIL_CONFIG['sender_email'] != 'your-email@gmail.com'
    })

@app.route('/network-info')
def network_info():
    """Network information endpoint"""
    local_ip = get_local_ip()
    return jsonify({
        "local_url": f"http://localhost:{port}",
        "network_url": f"http://{local_ip}:{port}",
        "local_ip": local_ip,
        "port": port
    })

# Global port variable
port = None

if __name__ == '__main__':
    # Find available port
    port = find_available_port(5000, 5020)
    
    if port is None:
        print("❌ Could not find an available port between 5000-5020")
        print("💡 Please close other applications using these ports")
        exit(1)
    
    print("🚀 Starting SBG Groups Order App...")
    print(f"🔍 Found available port: {port}")
    
    # Check email configuration
    if EMAIL_CONFIG['sender_email'] == 'your-email@gmail.com':
        print("⚠️  Email not configured - orders will be printed to console only")
        print("💡 To enable email: Update EMAIL_CONFIG in app.py")
    else:
        print("✅ Email service configured")
    
    # Print network information
    print_network_info(port)
    
    # Run Flask app
    try:
        app.run(
            debug=True, 
            host='0.0.0.0',  # Allow external connections
            port=port,
            use_reloader=False
        )
    except KeyboardInterrupt:
        print("\n👋 App stopped by user")
    except Exception as e:
        print(f"❌ Error starting app: {e}")